version: 2.1

orbs:
  terraform:
    commands:
      init:
        description: "Terraform Init"
        parameters:
          additional_params:
            type: string
            default: ""
        steps:
          - run:
              name: "Terraform Init"
              command: |
                terraform init --force-copy << parameters.additional_params >>

      plan:
        description: "Terraform Plan"
        parameters:
          additional_params:
            type: string
            default: ""
          plan_path:
            type: string
            default: cluster.plan
        steps:
          - run:
              name: "Terraform Plan"
              command: |
                terraform plan --input="false" --out="<< parameters.plan_path >>" << parameters.additional_params >>

      apply:
        description: "Terraform Apply"
        parameters:
          additional_params:
            type: string
            default: ""
          plan_path:
            type: string
            default: cluster.plan
        steps:
          - run:
              name: "Terraform Apply"
              command: |
                ([ -f << parameters.plan_path >> ] && terraform apply --auto-approve << parameters.additional_params >> << parameters.plan_path >>) \
                || echo "No plan to apply"

      destroy:
        description: "Terraform Destroy"
        parameters:
          additional_params:
            type: string
            default: ""
        steps:
          - run:
              name: "Terraform Destroy"
              command: |
                terraform destroy --auto-approve << parameters.additional_params >>

      config_validate:
        description: "Terraform Config Validate"
        parameters:
          additional_params:
            type: string
            default: ""
        steps:
          - run:
              name: "Terraform Config Validate"
              command: |
                terraform validate << parameters.additional_params >>

jobs:
  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:stable
    steps:
      - checkout
      - run:
          name: "Check Scripts"
          command: |
            find . -type f -name '*.sh' | wc -l
            find . -type f -name '*.sh' | xargs shellcheck --external-sources

  terraform-plan-infrastructure:
    docker:
      - image: bartsmykla/cicd:1.4.2
    parameters:
      plan_path:
        type: string
        default: cluster.plan
    steps:
      - checkout
      - terraform/init:
          additional_params: |
            --backend-config="access_key=${DIGITAL_OCEAN_SPACES_ACCESS_KEY}" \
            --backend-config="secret_key=${DIGITAL_OCEAN_SPACES_SECRET_KEY}" \
            --backend-config="bucket=tfstate-smykla" \
            --backend-config="endpoint=https://fra1.digitaloceanspaces.com" \
            --backend-config="key=cluster/terraform.tfstate"
      - save_cache:
          key: terraform-state-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - terraform.tfstate
            - terraform.tfstate.backup
            - .terraform
      - terraform/config_validate
      - terraform/plan:
          plan_path: << parameters.plan_path >>
      - save_cache:
          key: terraform-plan-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - << parameters.plan_path >>
      - store_artifacts:
          path: << parameters.plan_path >>
    environment:
      TF_IN_AUTOMATION: true

  terraform-setup-infrastructure:
    docker:
      - image: bartsmykla/cicd:1.4.2
    parameters:
      plan_path:
        type: string
        default: cluster.plan
    steps:
      - checkout
      - restore_cache:
          key: terraform-state-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - restore_cache:
          key: terraform-plan-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - terraform/apply:
          plan_path: << parameters.plan_path >>
    environment:
      TF_IN_AUTOMATION: true

workflows:
  "Setup Infrastructure":
    jobs:
      - shellcheck
      - terraform-plan-infrastructure:
          requires:
            - shellcheck
      - hold:
          type: approval
          requires:
            - terraform-plan-infrastructure
      - terraform-setup-infrastructure:
          requires:
            - hold
          filters:
            branches:
              only: master